pipeline {
    agent any
    parameters {
        string(name: 'BACKEND_TAG', defaultValue: '1', description: 'Backend Docker image tag')
        string(name: 'FRONTEND_TAG', defaultValue: '1', description: 'Frontend Docker image tag')
    }
    environment {
        BACKEND_IMAGE = "hamzabox/ayarihamza-4twin2-g1-kaddem-api:${params.BACKEND_TAG}"
        FRONTEND_IMAGE = "hamzabox/ayarihamza-4twin2-g1-kaddem-frontend:${params.FRONTEND_TAG}"
        DEPLOY_STATUS = "SUCCESS"
        ERROR_MESSAGE = ""
        DEPLOY_TIMESTAMP = new Date().format("dd/MM/yyyy HH:mm:ss")
    }
    stages {
        stage('Clean Up') {
            steps {
                script {
                    try {
                        echo 'Cleaning up previous containers and images...'
                        sh 'docker-compose down --remove-orphans'
                        sh '''
                            # Remove the specific volume
                            docker volume rm kaddem-back_db || true
                        '''
                    } catch (Exception e) {
                        env.DEPLOY_STATUS = "FAILED"
                        env.ERROR_MESSAGE = "√âchec lors du nettoyage: ${e.message}"
                        error env.ERROR_MESSAGE
                    }
                }
            }
        }
        stage('Pull Docker Images') {
            steps {
                script {
                    try {
                        echo "Pulling backend and frontend images from Docker Hub..."
                        sh "docker pull ${BACKEND_IMAGE}"
                        sh "docker pull ${FRONTEND_IMAGE}"
                    } catch (Exception e) {
                        env.DEPLOY_STATUS = "FAILED"
                        env.ERROR_MESSAGE = "√âchec lors du t√©l√©chargement des images Docker: ${e.message}"
                        error env.ERROR_MESSAGE
                    }
                }
            }
        }
        stage('Start Services with Docker Compose') {
            steps {
                script {
                    try {
                        echo "Starting backend, frontend, and database using Docker Compose..."
                        sh 'docker-compose up -d'
                    } catch (Exception e) {
                        env.DEPLOY_STATUS = "FAILED"
                        env.ERROR_MESSAGE = "√âchec lors du d√©marrage des services: ${e.message}"
                        error env.ERROR_MESSAGE
                    }
                }
            }
        }
        stage('Check Running Services') {
            steps {
                script {
                    try {
                        echo "Checking if all services are running..."
                        sh 'docker ps'
                        
                        // V√©rifier que tous les conteneurs sont en cours d'ex√©cution
                        def runningContainers = sh(script: 'docker ps | grep -E "kaddem|mysqldb|json-server" | wc -l', returnStdout: true).trim()
                        if (runningContainers.toInteger() < 3) {
                            env.DEPLOY_STATUS = "WARNING"
                            env.ERROR_MESSAGE = "Certains conteneurs ne semblent pas s'√™tre lanc√©s correctement"
                        }
                    } catch (Exception e) {
                        env.DEPLOY_STATUS = "FAILED"
                        env.ERROR_MESSAGE = "√âchec lors de la v√©rification des services: ${e.message}"
                        error env.ERROR_MESSAGE
                    }
                }
            }
        }
        stage('Verify Connectivity') {
            steps {
                script {
                    try {
                        echo "V√©rifie la connexion aux services..."
                        
                        // Tentative de connexion au backend (v√©rification simple)
                        sh '''
                            # Attendez que le service backend soit pr√™t
                            for i in $(seq 1 30); do
                                curl -s http://localhost:8082/actuator/health && break
                                echo "Attente du d√©marrage du backend... ($i/30)"
                                sleep 3
                            done
                        '''
                        
                        // Tentative de connexion au frontend
                        sh '''
                            curl -s -o /dev/null -w "%{http_code}" http://localhost:4200 | grep -q "200" || echo "Frontend peut ne pas √™tre pr√™t"
                        '''
                    } catch (Exception e) {
                        env.DEPLOY_STATUS = "WARNING"
                        env.ERROR_MESSAGE = "Services d√©marr√©s mais la v√©rification de connectivit√© a √©chou√©: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (env.DEPLOY_STATUS == "WARNING") {
                    mail(
                        to: 'hamzosayari07@gmail.com',
                        subject: "‚ö†Ô∏è D√âPLOIEMENT AVEC AVERTISSEMENTS: Kaddem Pipeline - ${DEPLOY_TIMESTAMP}",
                        body: """üöÄ D√©ploiement termin√© avec avertissements üöÄ

üìã R√©sum√© du d√©ploiement:
--------------------------
üîπ Statut: TERMIN√â AVEC AVERTISSEMENTS
üîπ Date/Heure: ${DEPLOY_TIMESTAMP}
üîπ Backend: ${BACKEND_IMAGE}
üîπ Frontend: ${FRONTEND_IMAGE}

‚ö†Ô∏è Avertissements: ${ERROR_MESSAGE}

üåê Acc√®s aux applications:
--------------------------
üîπ Frontend: http://localhost:4200
üîπ Backend API: http://localhost:8082
üîπ Prometheus: http://localhost:9090
üîπ Grafana: http://localhost:3000

Pour plus de d√©tails, consultez les logs: ${BUILD_URL}console
"""
                    )
                } else {
                    mail(
                        to: 'hamzosayari07@gmail.com',
                        subject: "‚úÖ D√âPLOIEMENT R√âUSSI: Kaddem Pipeline - ${DEPLOY_TIMESTAMP}",
                       body: """üöÄ D√©ploiement termin√© avec succ√®s üöÄ

üìã R√©sum√© du d√©ploiement:
--------------------------
üîπ Statut: SUCC√àS
üîπ Date/Heure: ${"${DEPLOY_TIMESTAMP}"}
üîπ Backend: ${"${BACKEND_IMAGE}"}
üîπ Frontend: ${"${FRONTEND_IMAGE}"}
...
"""

üåê Acc√®s aux applications:
--------------------------
üîπ Frontend: http://localhost:4200
üîπ Backend API: http://localhost:8082
üîπ Prometheus: http://localhost:9090
üîπ Grafana: http://localhost:3000
üîπ JSON Server: http://localhost:3001

üìä Statistiques:
--------------------------
Images Docker utilis√©es: 5
Conteneurs d√©marr√©s: $(sh(script: 'docker ps | grep kaddem | wc -l', returnStdout: true).trim())

Pour plus de d√©tails, consultez les logs: ${BUILD_URL}console
"""
                    )
                }
            }
        }
        
        failure {
            mail(
                to: 'hamzosayari07@gmail.com',
                subject: "‚ùå √âCHEC DU D√âPLOIEMENT: Kaddem Pipeline - ${DEPLOY_TIMESTAMP}",
                body: """‚õî D√©ploiement √©chou√© ‚õî

üìã R√©sum√© du d√©ploiement:
--------------------------
üîπ Statut: √âCHEC
üîπ Date/Heure: ${DEPLOY_TIMESTAMP}
üîπ Backend: ${BACKEND_IMAGE}
üîπ Frontend: ${FRONTEND_IMAGE}

‚ùå Cause de l'√©chec:
--------------------------
${ERROR_MESSAGE ?: 'Erreur non sp√©cifi√©e'}

üîç V√©rifications √† effectuer:
--------------------------
‚Ä¢ Les images Docker existent-elles sur DockerHub?
‚Ä¢ Le fichier docker-compose.yml est-il correct?
‚Ä¢ Les ports requis sont-ils disponibles?
‚Ä¢ MySQL est-il configur√© correctement?

üí° Actions recommand√©es:
--------------------------
1. V√©rifiez les logs Jenkins: ${BUILD_URL}console
2. V√©rifiez les logs Docker: docker logs kaddem-backend
3. Assurez-vous que les images Docker sont accessibles
4. V√©rifiez la connectivit√© r√©seau entre les conteneurs

Pour plus de d√©tails, consultez les logs complets: ${BUILD_URL}console
"""
            )
        }
        
        always {
            script {
                echo "Pipeline termin√© avec statut: ${currentBuild.result}"
                
                // Nettoyage des variables d'environnement
                env.ERROR_MESSAGE = ""
                env.DEPLOY_STATUS = "SUCCESS"
            }
        }
    }
}
