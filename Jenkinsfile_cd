pipeline {
    agent any

    parameters {
        string(name: 'BACKEND_TAG', defaultValue: '1', description: 'Backend Docker image tag')
        string(name: 'FRONTEND_TAG', defaultValue: '1', description: 'Frontend Docker image tag')
        booleanParam(name: 'CLEAN_DB', defaultValue: false, description: 'Clean database volume')
    }

    environment {
        BACKEND_IMAGE = "hamzabox/ayarihamza-4twin2-g1-kaddem-api:${params.BACKEND_TAG}"
        FRONTEND_IMAGE = "hamzabox/ayarihamza-4twin2-g1-kaddem-frontend:${params.FRONTEND_TAG}"
    }

    stages {
        stage('Clean Up') {
            steps {
                echo 'Cleaning up previous containers and images...'
                sh 'docker-compose down --remove-orphans'
            }
        }

        stage('Clean Database Volume') {
            when {
                expression { params.CLEAN_DB == true }
            }
            steps {
                echo 'Cleaning database volume...'
                sh '''
                    # Get the project name (directory name by default)
                    PROJECT_NAME=$(basename $(pwd) | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')

                    # Try to remove the volume
                    if docker volume ls -q | grep -q "${PROJECT_NAME}_db"; then
                        echo "Removing volume ${PROJECT_NAME}_db"
                        docker volume rm ${PROJECT_NAME}_db
                    else
                        echo "Volume ${PROJECT_NAME}_db not found, trying alternate name patterns"
                        # Try other common naming patterns
                        for VOL in $(docker volume ls -q | grep "_db$"); do
                            echo "Removing volume $VOL"
                            docker volume rm $VOL
                        done
                    fi
                '''
            }
        }

        stage('Pull Docker Images') {
            steps {
                echo "Pulling backend and frontend images from Docker Hub..."
                sh "docker pull ${BACKEND_IMAGE}"
                sh "docker pull ${FRONTEND_IMAGE}"
            }
        }

        stage('Start Services with Docker Compose') {
            steps {
                echo "Starting backend, frontend, and database using Docker Compose..."
                // Use double quotes for variable expansion
                sh """
                    BACKEND_TAG=${params.BACKEND_TAG} FRONTEND_TAG=${params.FRONTEND_TAG} docker-compose up -d
                """
            }
        }

        stage('Check Running Services') {
            steps {
                echo "Checking if all services are running..."
                sh 'docker ps'
            }
        }
    }
}