pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE_NAME = 'oussamakaddech/kaddem-project'
        DOCKER_TAG = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/hamzaayarii/4TWIN2-G1-kaddem-project.git',
                    branch: 'oussamakaddech-4Twin2-G1'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test -DskipTests=false'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                failure {
                    error 'Tests failed!'
                }
            }
        }

        stage('JaCoCo Code Coverage') {
            steps {
                sh 'mvn jacoco:report'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'target/site/jacoco/index.html', allowEmptyArchive: true
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh 'mvn sonar:sonar -Dsonar.host.url=http://10.0.2.15:9000/ -Dsonar.token=$SONAR_TOKEN'
                    }
                }
            }
        }

        stage('Build and Deploy to Nexus') {
            steps {
                sh 'mvn clean compile'
                sh 'mvn package -DskipTests=false'
                sh 'mvn deploy -s /usr/share/maven/conf/settings.xml'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
                }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    sh 'docker push docker.io/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}'
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    sh "TAG=${DOCKER_TAG} docker compose up -d"
                    sh 'docker compose logs'
                }
            }
        }

        stage('Monitor Services') {
            steps {
                script {
                    echo 'Monitoring setup: Checking Prometheus and Grafana availability.'
                    sh 'curl -f http://localhost:9090/-/healthy || exit 1'
                    sh 'curl -f http://localhost:3000/api/health || exit 1'
                    echo 'Grafana dashboard should display metrics for Spring Boot app and MySQL containers.'
                }
            }
        }

    
    }

    post {
        always {
            sh 'docker compose down || true'
            sh 'docker logout || true'
            sh 'docker rm -f $(docker ps -a -q --filter ancestor=${DOCKER_IMAGE_NAME}:${DOCKER_TAG}) || true'
            sh 'docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true'
            echo 'Pipeline completed.'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
}
